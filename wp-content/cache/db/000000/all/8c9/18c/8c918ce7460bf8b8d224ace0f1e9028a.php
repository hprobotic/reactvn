~ºW<?php exit; ?>a:6:{s:10:"last_error";s:0:"";s:10:"last_query";s:95:"SELECT reactvn_posts.* FROM reactvn_posts WHERE ID IN (471,460,450,423,414,406,391,377,371,360)";s:11:"last_result";a:10:{i:0;O:8:"stdClass":23:{s:2:"ID";s:3:"360";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-02-22 16:24:54";s:13:"post_date_gmt";s:19:"2016-02-22 16:24:54";s:12:"post_content";s:9124:"<h2>The Problem with Data Fetching in React</h2>

As React has grown in popularity, the scale and complexity of the projects built with React has grown along with it. React is primarily a view layer library. This has caused some teams to hit unknown territory or limitations while building projects that require a different infrastructure. Facebook has been proactive in offering support and guidance during these growing pains.

<h3>Flux</h3>

One of the early growing pains for developers using React was event handling. Facebook responded to this issue by publishing Flux, which is an abstract pattern that encouraged unidirectional data flow for handling events in React.

I‚Äôll assume some familiarity with Flux, so I won‚Äôt discuss the details of it in this article. In case you aren‚Äôt familiar with this topic, you can give a reading to this article by Sandeep Panda or take a look at this page about Flux.

Flux has taken the React ecosystem to the next level. As developers started to get more familiar with Flux, some issues emerged. Flux has been great for managing data as application state, but populating the initial state into an application has been a source of friction.

There are several challenges surrounding Flux‚Äôs data initialization. Do stores call the server and populate themselves? Do we use rehydrate methods from the dispatcher? Do we call a bunch of actions on the server to populate the stores? How do we do this asynchronously and load all our data on the server in an isomorphic app before returning a response?

<h2>What Is Relay?</h2>

Relay is a new React Data fetching framework published by Facebook. Relay aims to provide a clear solution to all of these data-fetching problems.

Relay has a few main selling points:

<ul>
    <li>Declarative: This is also a main feature of React. Relay leverage a declarative code style definition for data dependencies, which is very similar to how view components are defined. This is a refreshing change from traditional imperative data-fetching APIs.</li>

    <li>Collocation: Data dependency definitions live alongside component definitions, which makes it much easier to reason about what data a UI component requires to render. This makes troubleshooting a project‚Äôs code a lot easier. Looking at a file that contains a React component definition, it‚Äôs immediately obvious what data it needs to function.</li>

    <li>Mutations: Mutations enable an experience of seamless modification to data which a React view is subscribed to and also populates those modifications to the data persistence layer.</li>
</ul>

<h3>Relay vs Flux</h3>

Flux is an abstract idea whereas Relay is an implementation inspired by that idea. Relay is built on the concepts of Flux and has the same concepts of dispatcher, actions, and stores, but they are represented a bit differently. Relay has a new concept called ‚ÄòHigher Order Components‚Äô and we‚Äôll expand on this topic in the remainder of the article.

At this stage, it‚Äôs still unclear if Relay will replace or coincide with existing Flux implementations. For example, Redux, a popular Flux implementation, also leverage ‚ÄòHigher Order Components‚Äô. Trying to use both Redux and Relay will cause a conflict over which framework is bound to a UI component. There is currently an ongoing discussion regarding Redux‚Äôs relationship with Relay.

<h2>Higher Order Components</h2>

Higher Order components or HOCs are defined in the same way as regular React components. HOCs wrap child UI components. The HOC will execute its queries and then render the child UI component, passing the query data in as props. The Flux flow is now managed by the HOC and the latter will act as a dispatcher. It has methods like setQueryParams() that can be considered as a Flux action. Calling <code>setQueryParams()</code> triggers the Flux flow. The queries defined in the HOC are updated, new data is fetched and the data is persisted in the HOC. The HOC is acting as a Flux store by persisting this data.

Below is a simplified example of a ProfilePicture component and a complimentary HOC. Imagine that we have ProfilePicture defined to render user avatars throughout our project. We need to fetch the data to display the user avatar. We then create a Relay HOC to query the user profile pictures from a database. The HOC passes this query data to the child ProfilePicture component:

<pre class="line-numbers language-javascript"><code class='language-javascript'>class ProfilePicture extends React.Component {
  // A standard Profile Picture component
}

// This is our Higher Order Component. It fetches the data to pass
// as props to Profile Picture
module.exports = Relay.createContainer(ProfilePicture, {
  fragments: {
    user: () => Relay.QL`
      fragment on User {
        profilePicture(size: $size) {
          uri,
        },
      }
    `,
  },
});</code></pre>

Our ProfilePicture component will then get some new local functions passed in as props. This essentially is how Relay triggers the Flux flow. The component calls these Relay prop functions, which is equivalent to a Flux action call. This causes Relay to fetch the latest data requested. Once done it populates its internal store and passes that down to the HOC‚Äôs child view component as props.

<h2>GraphQL</h2>

The above example may look a bit strange, particularly this part:

<pre class="line-numbers language-javascript"><code class='language-javascript'>Relay.QL`
      fragment on User {
        profilePicture(size: $size) {
          uri,
        },
      }
    `,</code></pre>

Much of the magic behind Relay is powered by GraphQL. GraphQL is a new query language from Facebook that specializes in operating on graph data structures. Discussing GraphQL in depth is outside the scope of this article, however you can deepen this topic by reading the Relay documentation which covers it. An existing project will not be set up to work with GraphQL right out of the box. The first recommended steps to getting started with Relay are:

<ul>
<li>Create a GraphQL Schema</li>
<li>Create a GraphQL Server</li>
</ul>

It should be noted that it may take a considerable amount of work to convert an existing project to a GraphQL Schema and set up or modify an existing server to be GraphQL-friendly. When starting a project from scratch, it might make more sense to use Relay immediately. Facebook provides a Relay Starter Kit that looks like a great solution for getting up and running with Relay and GraphQL on a new project.

<h2>Relay Without GraphQL</h2>

With all of the extra overhead required to set up GraphQL, Facebook‚Äôs Relay might not be the right tool for existing projects. Luckily, there is another Relay-inspired library out there that may be a better fit for these projects called react-transmit. react-transmit is an open source project that aims to be a ‚ÄúRelay-inspired library based on Promises instead of GraphQL.‚Äù

If we update the profile example from above to use react-trasmit then we have the following code:

<pre class="line-numbers language-javascript"><code class='language-javascript'>// Import Transmit
import Transmit from "react-transmit";

class ProfilePicture extends React.Component {
  // A standard Profile Picture component
}

// This is our Higher Order Component. It fetches the data to pass
// as props to Profile Picture
Transmit.createContainer(ProfilePicture, {
  fragments: {
    user: (userId) => {
      return new Promise(function(resolve, reject) { 
          // Do some Ajax here and resolve the promise
      });
    }
  },
});</code></pre>

The react-transmit example looks very similar to the Relay example. However, in this instance the user fragment is now a function that returns a Promise instead of a GraphQL query.

<h2>Current State of Relay</h2>

Facebook has released an open source ‚Äútechnical preview‚Äù of Relay. They have some great examples in the repository that show how to work with Relay and a very detailed documentation section.

It doesn‚Äôt seem that Relay is suitable for isomorphic applications at this time. There is no way to tell Relay to wait until all of the data dependencies have been loaded before rendering its child view, something that is needed on the server. In case you‚Äôre interested, there is an ongoing discussion regarding how Relay will work on the server. At the moment, this is a pattern that react-transmit is more suited to at the current time.

As for Relay‚Äôs future, its roadmap aims to provide a few key features soon:

Adapters for other data storage types so there is no hard dependency on GraphQL.
Better isomorphic support, as discussed earlier.

<h2>Conclusions</h2>

In this article, we‚Äôve discussed a new React complementary framework called Relay. Relay is built on some of the same concepts of Flux and powered by GraphQL. As I mentioned, Relay might not be a good choice for already existing projects. However, this framework is quite new and I expect it to become better and better at every release.

Now, it‚Äôs your turn. Did you know Relay? Have you ever adopted it in one of your projects?";s:10:"post_title";s:30:"React Data Fetching with Relay";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:30:"react-data-fetching-with-relay";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-02-22 16:24:54";s:17:"post_modified_gmt";s:19:"2016-02-22 16:24:54";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:27:"http://scriptsvn.com/?p=360";s:10:"menu_order";s:1:"5";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"1";}i:1;O:8:"stdClass":23:{s:2:"ID";s:3:"371";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-02-23 02:19:15";s:13:"post_date_gmt";s:19:"2016-02-23 02:19:15";s:12:"post_content";s:7472:"In SitePoint‚Äôs forums I stumbled across a thread entitled So Many Frameworks where Guido, confused at the sheer number of options available, was asking which JavaScript framework he should adopt to make his application more dynamic. Given what I‚Äôve been seeing in the industry and having used it myself, I stated that React had already won the client-side war. Fighting words like those need a bit more explaining, so here goes.

React is not just the hot new kid on the block, but a unifying paradigm. It can serve as a foundational technology for web applications that we can build on top of with confidence, knowing that it will not be replaced next month by its hotter cousin. Let‚Äôs take a look at React‚Äôs place among the current crop of MVC frameworks, exploring its strengths and ending with a prediction about where JavaScript development is headed in the future.

<h3>Client-Side MVC</h3>

For the past few years many smart people have been trying to build the perfect framework for making single-page apps ‚Äî applications rendered by JavaScript which have improved perceived performance by responding instantly to user input and data changes over time. Guillermo Rauch‚Äôs article 7 Principles of Rich Web Applications is one of the best rationales for why this is important and the things we should consider when building them.

You can find examples of how these types of applications are built at TodoMVC, as the name suggests they have traditionally been made up of Models, Views and Controllers.

React enters from left of stage

When React was first announced it looked a little odd. It focused solely on the View layer, and had no Models or Controllers. The code examples were written in a strange syntax called JSX which appeared to many like a backwards step towards Ye‚Äô Olden Days where it was common to mix HTML and JavaScript together.

No information was given on how you should structure your application other than that of a component hierarchy ‚Äî composable chunks of UI that could re-render efficiently whenever state changed. React took a few notable stances against popular ideas that existed in this space, features like two-way data binding and templating were blasted as bad ideas that are best avoided.

<h3>
Widespread Adoption</h3>

React quickly achieved critical mass. It‚Äôs hard to find JavaScript related mailing lists, conferences or meetups that don‚Äôt mention React these days. All of the local development teams in my city seem to be adopting React and contrary to other popular frameworks the verdict seems unanimous ‚Äî everyone who I‚Äôve spoken with has touted the merits of one-way data flow, component hierarchies and simple explicit renders, making the task simpler and the code more predictable.

React‚Äôs adoption has been surprising to me because of how volatile the JavaScript scene is. We rarely so broadly agree on anything. There are pockets of people loyal to one framework but most of us have jumped from framework to framework getting frustrated along the way with certain patterns that introduce complexity and bugs. I haven‚Äôt yet heard of a single case of people moving away from React due to these frustrations, not since jQuery has it seemed like we have had such a clear winner out in front.

<h3>You Had One Job React, One Job.</h3>

Its focus on the view layer means that it‚Äôs considerably less opinionated than other frameworks that attempt to solve every problem. Its wafer thin API means that there‚Äôs really not much to learn and it doesn‚Äôt warrant more than a handful of pages of documentation. This is a great help to those learning and it makes development simpler too, as you don‚Äôt have much cognitive overhead. Wherever possible, React opts for plain JavaScript constructs and language features rather than custom APIs or templating languages.

This design is also attractive to JavaScript developers who seem to favor focused utility libraries such as Underscore and Moment which do one thing well, very much the Unix philosophy. Doing one thing well has also allowed room for people interested in the project to contribute their own pieces to the React ecosystem. As a result of this projects like React Router, Redux and CSS Modules have arisen.

<h3>React Components Are Simple</h3>

Components are responsible for small isolated chunks of UI, they accept data and render consistently, every time. Front-end developers, back-end developers and designers can easily understand and contribute to components because they look like HTML and the minimal API footprint means that you can learn what you need to know about components in a day and start contributing right away.

<h3>Server Rendered HTML</h3>

React makes server-side rendering trivial because components can be thought of as functions that take data and return HTML. This design makes it easy to integrate server-side rendering into any server-side programming language or framework.

In the early days of client-side MVC we broke the web with things like hashbang routing and huge loading times before anything made its way to the screen. We also broke search engine crawlers by rendering everything with JavaScript when the page had loaded. Since then we‚Äôve learned from our mistakes and are taking these core tenets of the web seriously again ‚Äî URLs, server rendered HTML and fast load times. React shines here where other frameworks have struggled.

<h3>DOM Updates Are Messy</h3>

Backbone was an important milestone for JavaScript. As the first and most prominent effort to bring MVC to the client-side, it showed us a new way that we could structure our applications. One of the first things it mentioned in its documentation is that it‚Äôs a bad idea to maintain your state in the DOM. When the DOM remains the source of truth your app quickly becomes brittle and hard to follow. It becomes impossible to know which piece of code changed which element. Backbone encouraged an ideal of always re-rendering views based on the current state of the world, React enforces this same idea with it‚Äôs pattern of one-way data flow.

React components don‚Äôt define the transition between states. Instead, they explicitly render the view based on their current state, completely eliminating this task of manually tweaking the DOM. Its one-way data flow prevents the DOM from being the source of truth.

Admittedly, this makes certain tasks such as animation more difficult because those are cases where you do want to define transitions between states. For the vast majority of cases though, it‚Äôs much simpler to only concern yourself with the final state of how the component should be rendered.

<h3>The Future</h3>

React will continue to grow in popularity and we‚Äôll see more supporting tools and projects. As the ecosystem around React matures, the library may change but the core ideas of one-way data flow, component hierarchies, explicit renders and virtual DOM reconciliation will live on.

React Native has shown how a simple view layer can be re-purposed to construct other types of UI as well. There‚Äôs been a shift in the industry towards this pattern of building UI‚Äôs and it‚Äôs not going away any time soon.

In short, React has won and the future is bright.

<h3>Thoughts?</h3>

Do you agree that the principles of React will live on, or will we find a better idea next month?
Have you started using React? What are your thoughts so far?
Be sure to let me know in the comments below.";s:10:"post_title";s:56:"Client-Side War: ReactJS take down Angular JS & Ember JS";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:53:"client-side-war-reactjs-take-down-angular-js-ember-js";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-02-23 02:19:15";s:17:"post_modified_gmt";s:19:"2016-02-23 02:19:15";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:27:"http://scriptsvn.com/?p=371";s:10:"menu_order";s:1:"4";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}i:2;O:8:"stdClass":23:{s:2:"ID";s:3:"377";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-02-23 09:28:51";s:13:"post_date_gmt";s:19:"2016-02-23 09:28:51";s:12:"post_content";s:4178:"React Native is a collection of JavaScript and Objective-C code plus supporting tools that allow to create, run, and debug native iOS applications.
In order to reach the point where we can actually start working on our first React Native application, some preparation is necessary.
On your development machine, the following components need to be made available:
<ul>
 	<li>Homebrew</li>
 	<li>io.js</li>
 	<li>Watchman</li>
 	<li>Google Chrome</li>
 	<li>React Native CLI</li>
</ul>
<h3>Installing Homebrew</h3>
<em>Homebrew</em> is a package manager for Mac OSX. We will use it to subsequently install most of the software tools we need.
In order to install and set up Homebrew, open a Terminal shell window and run the following command:
<pre class="line-numbers language-markup"><code>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</code></pre>
For further information, visit the Homebrew homepage at <a href="http://brew.sh" target="_blank">http://brew.sh</a>
<h3>Installing io.js</h3>
<em>io.js</em> is a moderm fork of Node.js, the popular server-side JavaScript runtime enviroment. React Native ships with some helper tools that are written for io.js. Also, we will regularly use the Node.js/io.js package manager, <code>NPM</code>, to install the React Native command line tool and other dependencies
We are not going to install io.js directly. Instead, wee will use Homebrew to install nvm, the Node Version Manager.
<code>nvm</code> is a nifty little tool that takes the hassle out of managing parallel installs of different versions of Node.js and/or io.js. With it, you can install as many versions of Node.js and io.js as you wish, and quickly switch to the version you want to actually use for a given project.
In order to install and set up <code>nvm</code>, open a Terminal window and run the following command:
<pre class="line-numbers language-markup"><code>brew install nvm</code></pre>
After install completed, create or open file $HOME/.bashrc, and add the following lines at the begining:
<pre class="line-numbers language-bash"><code class="language-bash">export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh</code></pre>
Restart terminal and you now have <code>nvm</code> enabled in your Terminal session. Using nvm, we can now install io.js, follow this commands:
<pre class="line-numbers language-bash"><code class="language-bash">nvm install iojs
nvm alias default iojs</code></pre>
This commands will install and setup the most recent stable version of io.js, plus the maching version of <code>npm</code>, the Node Package Manager, and make this setup the default.
<h3>Installing Watchman</h3>
React Native uses Watchman to monitor and react to changes in source code files. This is explained more detail in a next post.

In order to install and setup Watch man, open a Terminal window and run the following command:
<pre class="line-numbers language-markup"><code>brew install --HEAD watchman</code></pre>
<h3>Install Google Chrome</h3>
Google Chrome isn't strictly necessary to create applications with React Native, but it allows to debug them during development. The details are explained in a next post.
Head over to <a href="https://www.google.com/chrome/browser/desktop/index.html">Chrome Desktop</a> to download the latest version.
<h3>Install the React Native CLI</h3>
The React Native Command Line Interface (CLI) is a small io.js helper script that allows to setup new React Native projects.
In order to install and setup React Native CLI, open a Terminal window and run the following command:
<pre class="line-numbers language-markup"><code>npm install -g react-native-cli</code></pre>
<em>(Sometimes we need use sudo for solve some permission error)</em>
With this, we are good to go to create our first application.
<blockquote>You might also want to install IDE. While Xcode is part of our development environment, it's certainly not the most well-suited JavaScript editor out there. Check out some our good IDE: Atom (<a href="http://atom.io">http://atom.io</a>), IntellJIDE CE (<a href="http:jetbrains.com">http:jetbrains.com</a>)</blockquote>";s:10:"post_title";s:46:"React Native#1 - Setup development evirontment";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:43:"react-native1-setup-development-evirontment";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 09:04:07";s:17:"post_modified_gmt";s:19:"2016-08-01 09:04:07";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:27:"http://scriptsvn.com/?p=377";s:10:"menu_order";s:1:"2";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"1";}i:3;O:8:"stdClass":23:{s:2:"ID";s:3:"391";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-02-24 02:35:51";s:13:"post_date_gmt";s:19:"2016-02-24 02:35:51";s:12:"post_content";s:7321:"In this article, we will create a very simple application and make it run in the iOS simulator. By doing so, we are using a whole lot of different components that in total allow use to end up with a working app. Once our app runs, we will look under the hood in order to understand all those components and get a feeling for the inner workings of React Native applications. These insights form the basis that allows us to build more complex applications while truly understanding what we are doing.
<h2>Creating the app structure</h2>
Open a new Terminal window. On the command prompt, type the following and hit enter:
<pre class="line-numbers language-markup"><code>react-native init HelloWorld</code></pre>
This result in some work being done which gives you a new folder named <code>HelloWord</code>. We will analyze its contents later - for now, we want to get our feet wet as quickly as possible.
<h2>Start the app</h2>
Start Xcode¬Æ, choose <code>File ‚ñ∂ Open‚Ä¶</code> from the menu bar, navigate to the <code>HelloWorld</code> folder, and open
file <code>HelloWorld.xcodeproj.</code>
Then, choose <code>Product ‚ñ∂ Destination</code> from the menu bar, and from the list beneath <code>iOS Simulator,
</code>choose <code>iPhone 6.</code>
Now, hit <code>‚åò-R </code>in order to build and run the application. This will open two new windows: a terminal
window that talks about the <em>React packager,</em> and the iOS simulator which shows a visually rather
unimpressive app that greets you with a <code>Welcome to React Native! </code>message.
<blockquote>In case you get an ugly red error screen in the iOS Simulator that says Could not connect to
development server, then proceed as follows: - Switch to a Terminal window - cd to the root folder
of the Hello World project - Run npm start and keep the Terminal open</blockquote>
An awful lot of very interesting things just happened in order to display this simulator screen, and
dissecting all the components involved and analyzing all the ways these components interact with
each other will be a very exciting trip down the rabbit hole that is React Native - but, not yet. First
the doing, then the explanations.
<h2>Working on the Code</h2>
As said, a lot of different components are involved that make up our application, but front and
center is the JavaScript code that defines and manages the user interface of our app - after all, the
central idea behind React Native is the ability to write native apps with JavaScript. So let‚Äôs look at
the JavaScript behind HelloWorld.
Fire up the editor or IDE you decided to use and point it at the HelloWorld folder you created. In it,
you will find a file named index.ios.js which you need to open in your editor.
<blockquote>In Xcode¬Æ, you probably saw a file named main.jsbundle. For now, this is <strong>not</strong> what we are looking
for.</blockquote>
It‚Äôs immediately obvious that this is the file behind the UI we see in the simulator:
<pre class="line-numbers language-javascript"><code class="language-javascript">/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 */
'use strict';
import React, {
  AppRegistry,
  Component,
  StyleSheet,
  Text,
  View
} from 'react-native';

class HelloWord extends Component {
  render() {
    return (
      
        
          Welcome to React Native!
        
        
          To get started, edit index.ios.js
        
        
          Press Cmd+R to reload,{'n'}
          Cmd+D or shake for dev menu
        
      
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('HelloWord', () =&gt; HelloWord);
</code></pre>
Clearly, this is JavaScript code, but if you haven‚Äôt followed the latest developments in the JS world or if you did not yet play around with the ‚Äúnormal‚Äù React framework, then some parts of this code might look a bit odd. Not that this should stop us from fiddling around!
Change line 19 from
<pre class="line-numbers language-markup"><code>Welcome to React Native!</code></pre>
to
<pre class="line-numbers language-markup"><code>Howdy World</code></pre>
Then switch back to the iOS Simulator window and hit <strong>‚åò-R</strong>. The UI of our app will refresh and display the new text.
Now, if you heaven't done any native iOS app development before, hitting <em>Refresh</em> and seeing the changes you did to the code reflected in the Simulator probably doesn't feel like a big deal, but it actually is. The same procedure for an Objective-C or Swift based application involves a recompilation of the changed source code and a rebuild of the application that is then completely restarted in the Simulator. That doesn't only sound like it takes longer, it does take longer.
Once again, the explanation for why and how this "refresh" workflow actually works will follow later.
It would be great if we could make our app do something. Let's try to add a text input field for entering a name and change the behaviour of our app in a way that makes it greet the name we enter - if this doesn't secure us the #1 spot in Appstore charts, then I don't know what will.

What we need in order to achieve this functionality is:
a) An additional UI element plus styling that allows to input text
b) A function that handles the text that is input
c) A way to output the input text within the greet text element.
After that, the result should look like this:

<a href="https://scriptsvn.com/wp-content/uploads/2016/02/Screenshot-2016-02-24-14.34.29.png" rel="attachment wp-att-404"><img src="http://scriptsvn.com/wp-content/uploads/2016/02/Screenshot-2016-02-24-14.34.29.png" alt="React-native-helloworld" /></a>
Here is final code in index.ios.js that is needed:
<pre class="line-numbers language-javascript"><code class="language-javascript">/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 */
'use strict';
import React, {
  AppRegistry,
  Component,
  StyleSheet,
  Text,
  TextInput,
  View,
} from 'react-native';

var HelloWord = React.createClass ({
  getInitialState: function() {
    return {name: 'Scripter'};
  },
  onNameChanged: function(event) {
    this.setState({ name: event.nativeEvent.text })
  },
  render: function() {
    return (
      
        
        
          Howdy {this.state.name}
        
        
          To get started, edit index.ios.js
        
        
          Press Cmd+R to reload,{'n'}
          Cmd+D or shake for dev menu
        
      
    );
  }
})
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('HelloWord', () =&gt; HelloWord);
</code></pre>";s:10:"post_title";s:68:"React Native#2: Create first native iOS application use React Native";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:66:"react-native2-create-first-native-ios-application-use-react-native";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 09:05:04";s:17:"post_modified_gmt";s:19:"2016-08-01 09:05:04";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=391";s:10:"menu_order";s:1:"3";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"1";}i:4;O:8:"stdClass":23:{s:2:"ID";s:3:"406";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-02-24 08:12:46";s:13:"post_date_gmt";s:19:"2016-02-24 08:12:46";s:12:"post_content";s:0:"";s:10:"post_title";s:51:"React Native#3: React Native architecture explained";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:49:"react-native3-react-native-architecture-explained";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 09:03:10";s:17:"post_modified_gmt";s:19:"2016-08-01 09:03:10";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=406";s:10:"menu_order";s:1:"1";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}i:5;O:8:"stdClass":23:{s:2:"ID";s:3:"414";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-04-26 17:20:46";s:13:"post_date_gmt";s:19:"2016-04-26 17:20:46";s:12:"post_content";s:2261:"<h2>Description</h2>
Build the application interface using Interface Builder, and learn how to adjust interface elements with the Size Inspector and Auto Layout constraints.
<h1>Learning Outcomes</h1>
<ul>
 	<li>Describe the Model-View-Controller pattern and identify the view and controller in an Xcode project.</li>
 	<li>Analyze a user interface and subdivide it into components.</li>
 	<li>Assemble an iOS app interface using Interface Builder.</li>
 	<li>Use Auto Layout constraints to position multiple interface elements.</li>
 	<li>Experiment with Interface Builder previews.</li>
</ul>
<h1>Opening</h1>
Once we have a clear idea for an app, how do we start building the user interface?
<h1>Agenda</h1>
<ul>
 	<li>Present the concepts of Model-View-Controller, focusing on views and view controllers, and how they work together to presnet the UI of an iOS app.</li>
 	<li>With Interface Builder, use the Object Library (‚å•‚åòL) to add a Label for displaying the elapsed time, and change its contents to 00:00.0</li>
 	<li>Use the attributes Inspector() and Size Inspector to adjust the Label position, size, color and typeface.</li>
 	<li>Add constraints to the Label by Control-dragging upwards from the Label to the main view, add selecting Center Horizontally in Container to create a Center X Alignment constraint. Use the Pin tool to create a top Vertical Space constraint.</li>
 	<li>Resolve any constraint issue using the menu item Editor&gt; Resolve Auto Layout Issues &gt; Update Frames (Command + shift + =)</li>
 	<li>Use the Object Library (Command + Shift + L) again to add two Buttons, labeled Start and Stop, to the main view. Adjust their size and position with the Size Inspector (Command + Shift + 5).</li>
 	<li>Add a Center Y Aligment constraint to the Buttons by Control-dragging from the Start button to the Stop button, and select Center Y. Add a Vertical Space constraint by Control-dragging downward from the Start button to the main view, and selecting Bottom Space to Bottom Layout Guide.</li>
 	<li>Add Center X Aligment constraints to both buttons by select them both together(Command + Click), and using the Align tool to select Horizontal Center in Container and Use Current Canvas Value.</li>
</ul>";s:10:"post_title";s:18:"Stopwatch Lesson 1";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:18:"stopwatch-lesson-1";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 09:03:04";s:17:"post_modified_gmt";s:19:"2016-08-01 09:03:04";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=414";s:10:"menu_order";s:1:"0";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}i:6;O:8:"stdClass":23:{s:2:"ID";s:3:"423";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-05-15 08:44:10";s:13:"post_date_gmt";s:19:"2016-05-15 08:44:10";s:12:"post_content";s:13268:"C√°c thi·∫øt k·∫ø m·∫´u c√≥ th·ªÉ coi l√† c√°c ch√≠nh s√°ch b·∫£o hi·ªÉm cho vi·ªác ph√°t tri·ªÉn ph·∫ßm m·ªÅm. C√°c ch√≠nh s√°ch b·∫£o hi·ªÉm ho·∫°t ƒë·ªông b·∫±ng c√°ch trao ƒë·ªïi m·ªôt ph·∫ßn nh·ªè chi ph√≠ trong hi·ªán t·∫°i ƒë·ªÉ tr√°nh vi·ªác ti√™u t·ªën nhi·ªÅu chi ph√≠ h∆°n cho c√°c r·ªßi ro c√≥ th·ªÉ ph√°t sinh trong t∆∞∆°ng lai. V√≠ d·ª•, nh·ªØng kho·∫£n b·∫£n chi tr·∫£ cho b·∫£o hi·ªÉm ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p chi·∫øc xe b·ªã ƒë√°nh c·∫Øp, ti√™u m·ªôt v√†i ph·∫ßn trƒÉm gi√° tr·ªã c·ªßa chi·∫øc xe, nh∆∞ng khi chi·∫øc xe b·ªã ƒë√°nh c·∫Øp, th√¨ t·ªïng thi·ªát h·∫°i c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c gi·∫£m thi·ªÉu t·ªëi ƒëa. B·∫°n v·∫´n g·∫∑p ph·∫£i phi·ªÅn ph·ª©c v√¨ chi·∫øc xe ƒë√£ b·ªã ƒë√°nh c·∫Øp, nh∆∞ng √≠t nh·∫•t th√¨ b·∫°n c≈©ng s·∫Ω kh√¥ng ph·∫£i ch·ªãu th√™m c√°c m·∫•t m√°t t√†i ch√≠nh - ƒëi·ªÅu n√†y c√≥ ph·∫£i l√† r·∫•t t·ªët ph·∫£i kh√¥ng?.

Trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm, c√°c thi·∫øt k·∫ø m·∫´u l√† s·ª± ƒë·∫£m b·∫£o ch·ªëng l·∫°i vi·ªác b·∫°n s·∫Ω ph·∫£i ti√™u t·ªën r·∫•t r·∫•t nhi·ªÅu th·ªùi gian ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ. C√°i m√† b·∫°n ph·∫£i chi tr·∫£ (cho ch·∫ø ƒë·ªô b·∫£o hi·ªÉm n√†y) l√† ph·∫£i b·ªè ra th√™m th·ªùi gian ƒë·ªÉ l√†m cho code c·ªßa b·∫°n th·ª±c s·ª± m·ªÅm d·∫ªo ngay b√¢y gi·ªù, v√† t·∫•t nhi√™n trong t∆∞∆°ng lai, th·ª© m√† b·∫°n nh·∫≠n l·∫°i ƒë√≥ s·∫Ω l√† tr√°nh ƒë∆∞·ª£c ƒëau ƒë·ªõn c≈©ng nh∆∞ ti·∫øt ki·ªám th·ªùi gian trong qu√° tr√¨nh t√°i s·ª≠ d·ª•ng ho·∫∑c thay ƒë·ªïi c√°ch m√† ph·∫ßn m·ªÅm s·∫Ω ho·∫°t ƒë·ªông. Gi·ªëng nh∆∞ b·∫£o hi·ªÉm th·∫≠t s·ª±, b·∫°n c√≥ th·ªÉ s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c b·∫•t c·ª© l·ª£i √≠ch n√†o c·∫£ n·∫øu nh∆∞ ·ª©ng d·ª•ng ho·∫°t ƒë·ªông ho√†n h·∫£o v√† ch·∫≥ng c√≥ v·∫•n ƒë·ªÅ g√¨ s·∫£y ra, nh∆∞ng b·∫°n bi·∫øt ƒë·∫•y trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm, th·∫≠t hi·∫øm khi m·ªôt ·ª©ng d·ª•ng c√≥ th·ªÉ ho·∫°t ƒë·ªông ho√†n h·∫£o trong su·ªët v√≤ng ƒë·ªùi c·ªßa n√≥, s·∫Ω lu√¥n c√≥ nh·ªØng v·∫•n ƒë·ªÅ ph√°t sinh m√† b·∫°n ch·∫≥ng th·ªÉ ƒëo√°n ƒë·ªãnh ƒë∆∞·ª£c. Do ƒë√≥ vi·ªác ƒë·∫ßu t∆∞ v√†o vi·ªác t·ªëi ∆∞u m√£ lu√¥n l√† m·ªôt ƒë·∫ßu t∆∞ x·ª©ng ƒë√°ng

ƒê√¢y l√† m·ªôt se-ri d√†nh cho nh·ªØng nh√† l·∫≠p tr√¨nh chuy√™n nghi·ªáp. T√¥i t·∫≠p trung v√†o x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng ƒë√°p ·ª©ng c√°c thi·∫øt k·∫ø m·∫´u v√† t·∫≠p trung v√†o nh·ªØng ƒëo·∫°n m√£ m·∫´u thay cho vi·ªác tr√¨u t∆∞·ª£ng h√≥a ch√∫ng th√¥ng qua c√°c m√¥ t·∫£. T√¥i di·ªÖn gi·∫£i ƒëi·ªÅu quan tr·ªçng nh·∫•t trong c√°c thi·∫øt k·∫ø m·∫´u v√† th·ªÉ hi·ªán c√°ch m√† n√≥ ƒë√£ ƒë∆∞·ª£c ·ª©ng d·ª•ng v√†o iOS s·ª≠ d·ª•ng Swift. M·ªôt s·ªë m·∫´u t√¥i gi·ªõi thi·ªáu ·ªü ƒë√¢y ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng trong c√°c class c·ªßa Cocoa framework, v√† t√¥i s·∫Ω ch·ªâ b·∫°n c√°c s·ª≠ d·ª•ng ch√∫ng ƒë·ªÉ t·∫°o th√™m nh·ªØng ·ª©ng d·ª•ng m·∫°nh m·∫Ω v√† m·ªÅm d·∫ªo.

B·∫±ng vi·ªác d√†nh th·ªùi gian ƒë·ªÉ ho√†n th√†nh vi·ªác theo d√µi v√† th·ª±c h√†nh theo se-ri n√†y, b·∫°n s·∫Ω hi·ªÉu ƒë∆∞·ª£c nh·ªØng thi·∫øt k·∫ø m·∫´u quan tr·ªçng nh·∫•t trong vi·ªác ph√°t tri·ªÉn ph·∫ßn m·ªÅm hi·ªán ƒë·∫°i, c√°c v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt, c≈©ng nh∆∞ l√†m th·∫ø n√†o ƒë·ªÉ ·ª©ng d·ª•ng ch√∫ng trong c√°c d·ª± √°n Swift c·ªßa b·∫°n.
<h2>ƒê·∫∑t c√°c thi·∫øt k·∫ø m·∫´u v√†o ƒë√∫ng ho√†n c·∫£nh</h2>
H·∫ßu h·∫øt c√°c l·∫≠p tr√¨nh vi√™n gi√†u kinh nghi·ªám ƒë·ªÅu ƒë√£ c√≥ m·ªôt t·∫≠p h·ª£p c√°c quy ∆∞·ªõc, khung s∆∞·ªùn ƒë·ªÉ x√¢y d·ª±ng m·ªôt phong c√°c vi·∫øt m√£ c·ªßa ri√™ng h·ªç. Nh·ªØng ƒëi·ªÅu n√†y l√† c√°c ch√≠nh s√°ch b·∫£o hi·ªÉm ch·ªëng l·∫°i vi·ªác t√°i l·∫∑p l·∫°i c√°c sai l·∫ßm c·ªßa c√°c d·ª± √°n tr∆∞·ªõc ƒë√≥. V√≠ d·ª•, n·∫øu b·∫°n ƒë√£ ph·∫£i d√†nh c·∫£ tu·∫ßn ƒë·ªÉ gi·∫£i quy·∫øt m·ªôt thay ƒë·ªïi ph√∫t 90 c·ªßa c·∫•u tr√∫c d·ª± li·ªáu, th√¨ sau ƒë√≥ b·∫°n ti·∫øp t·ª•c b·∫°n s·∫Ω d√†nh th√™m m·ªôt ch√∫t th·ªùi gian trong c√°c d·ª± √°n s·∫Øp t·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng c√°c th√†nh ph·∫ßn ph·ª• thu·ªôc c·ªßa c·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng b·ªã "hard-coded" trong ·ª©ng d·ª•ng, k·ªÉ c·∫£ khi b·∫°n kh√¥ng bi·∫øt r·∫±ng li·ªáu c·∫•u tr√∫c c√≥ c·∫ßn thay ƒë·ªïi n·ªØa hay kh√¥ng. B·∫°n th·∫•y ƒë·∫•y, b·∫°n ch·ªâ ph·∫£i "chi tr·∫£" m·ªôt ph·∫ßn nh·ªè ngay b√¢y gi·ªù ƒë·ªÉ tr√°nh nh·ªØng t·ªïn th·∫•t n·∫∑ng n·ªÅ trong t∆∞∆°ng lai

B·∫°n c√≥ l·∫Ω v·∫´n c√≥ nh·ªØng thay ƒë·ªïi, nh∆∞ng qu√° tr√¨nh n√†y s·∫Ω d·ªÖ ch·ªãu h∆°n nhi·ªÅu, gi·ªëng nh∆∞ qu√° tr√¨nh ƒëi ch·ªçn mua m·ªôt chi·∫øc xe ƒë·ªÉ thay th·∫ø s·∫Ω d·ªÖ ch·ªãu h∆°n khi c√¥ng ty b·∫£o hi·ªÉm ch·∫•p nh·∫≠n chi tr·∫£ to√†n b·ªô chi ph√≠

C√≥ hai v·∫•n ƒë·ªÅ v·ªõi c√πng m·ªôt chi·∫øn l∆∞·ª£c. V·∫•n ƒë·ªÅ ƒë·∫ßu ti√™n l√† <em>s·ª± m√¢u thu·∫´n</em>. C√°c l·∫≠p tr√¨nh vi√™n v·ªõi c√πng c√°c kinh nghi·ªám c√≥ th·ªÉ s·∫Ω c√≥ nh·ªØng c√°i nh√¨n kh√°c nhau v·ªÅ c√πng m·ªôt v·∫•n ƒë·ªÅ v√† s·∫Ω kh√¥ng ƒë·ªìng thu·∫≠n v·ªõi gi·∫£i ph√°p t·ªët nh·∫•t

V·∫•n ƒë·ªÅ th·ª© hai l√† c√°c chi·∫øn l·ª±c ƒë∆∞·ª£c cung c·∫•p b·ªüi c√°c kinh nghi·ªám c√° nh√¢n, m√† c√≥ th·ªÉ ƒë∆∞·ª£c k·∫øt h·ª£p v·ªõi nh·ªØng c·∫£m x√∫c m·∫°nh m·∫Ω. M√¥ t·∫£ s·ª± kh√≥ khƒÉn c·ªßa vi·ªác gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ hi·∫øm khi bao g·ªìm c·∫£ nh·ªØng ƒëau ƒë·ªõn v√† kh·ªï s·ªü m√† b·∫°n ph·∫£i ch·ªãu ƒë·ª±ng, v√† n√≥ l√†m cho vi·ªác thuy·∫øt ph·ª•c ng∆∞·ªùi kh√°c x√¢y d·ª±ng c√°c bi·ªán ph√°p ph√≤ng ng·ª´a c√†ng th√™m kh√≥ khƒÉn. N√≥ c≈©ng r·∫•t kh√≥ ƒë·ªÉ tr·ªü n√™n kh√°ch quan trong vi·ªác ƒë√°nh gi√° m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa v·∫•n ƒë·ªÅ. Nh·ªØng tr·∫£i nghi·ªám t·ªìi t·ªá l·∫°i ti·∫øp t·ª•c, v√† b·∫°n c√≥ th·ªÉ s·∫Ω r·∫•t kh√≥ ƒë·ªÉ t√¨m ƒë∆∞·ª£c s·ª± ƒë·ªìng √Ω h·ªó tr·ª£ cho vi·ªác t·∫°o ra c√°c thay ƒë·ªïi nh·∫±m tr√°nh c√°c v·∫•n ƒë·ªÅ m√† b·∫°n ƒë√£ g·∫∑p ph·∫£i trong c√°c d·ª± √°n tr∆∞·ªõc ƒë√¢y.
<h2>Gi·ªõi thi·ªáu c√°c thi·∫øt k·∫ø m·∫´u (Design Patterns)</h2>
M·ªôt <em>thi·∫øt k·∫ø m·∫´u</em> x√°c ƒë·ªãnh m·ªôt v·∫•n ƒë·ªÅ ph√°t tri·ªÉn ph·∫ßn m·ªÅm th√¥ng d·ª•ng v√† cung c·∫•p m·ªôt gi·∫£i ph√°p ƒë·ªÉ gi·∫£i quy·∫øt n√≥, ch·ª© kh√¥ng ph·∫£i l√† c√°c ph∆∞∆°ng ph√°p t√¥i ƒë√£ m√¥ t·∫£ tr∆∞·ªõc ƒë√¢y nh∆∞ng l√† n√≥ ƒë∆∞·ª£c th·ªÉ thi·ªán kh√°ch quan, th√≠ch h·ª£p..

C√°c chi·∫øn l∆∞·ª£c m√† c√°c m·∫´u thi·∫øt k·∫ø ƒë∆∞·ª£c m√¥t t·∫£ ƒë·ªÉ l√†m vi·ªác, ƒëi·ªÅu ƒë√≥ c√≥ nghƒ©a l√† b·∫°n c√≥ th·ªÉ so s√°nh c√°ch ti·∫øp c·∫≠n c·ªßa ri√™ng b·∫°n v·ªõi ch√∫ng. V√† t·ª´ khi ch√∫ng c√≥ th·ªÉ ƒë·∫£m b·∫£o c√°c v·∫•n ƒë·ªÅ chung, b·∫°n th·∫•y r·∫±ng c√≥ nhi·ªÅu m·∫´u gi√∫p √≠ch cho vi·ªác gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ c·ªßa b·∫°n m√† kh√¥ng t·ªën nhi·ªÅu th·ªùi gian v√† c√¥ng s·ª©c (??)

H·∫ßu h·∫øt c√°c thi·∫øt k·∫ø m·∫´u kh√°c trong s√™-ri n√†y ƒë∆∞·ª£c b·∫Øt ngu·ªìn t·ª´ cu·ªën s√°ch c√≥ t√™n l√† "Design Patterns: Elements of Reuseable Object-Oriented Software" ƒë∆∞·ª£c vi·∫øt b·ªüi nh√≥m t√°c gi·∫£: Erich Gamma, Richard Helm, Ralp Johnson, v√† John Vlissides (NXB: Addison-Wesley, 1995). C√°c t√°c gi·∫£ n√†y ƒë∆∞·ª£c bi·∫øt ƒë·∫øn v·ªõi t√™n g·ªçi Gang of Four (GOF), v√† c√°c gm·∫´u h·ªç tr√¨nh b√†y tr·ªü th√†nh nh·ªØng th√†nh ph·∫ßn quan tr·ªçng nh·∫•t v√† tr·ªü th√†nh n·ªÅn m√≥ng trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm hi·ªán ƒë·∫°i.

Cu·ªën s√°ch c·ªßa GoF r·∫•t ƒë√°ng gi√° nh∆∞ng c√≥ ph·∫ßn h·ªçc trong t·ª± nhi√™n (The GoF book is worth reading but is somewhat academic in nature). Thi·∫øt k·∫ø c√°c m·∫´u ƒë√£ ƒë∆∞·ª£c tr√¨nh b√†y tr·ª´u t∆∞·ª£ng m√† kh√¥ng c·∫ßn tham chi·∫øu ƒë·∫øn m·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh hay n·ªÅn t·∫£ng n√†o. S·ª± tr·ª´u t∆∞·ª£ng n√†y l√†m n√≥ kh√≥ ƒë·ªÉ s·ª≠ d·ª•ng; n√≥ c√≥ th·ªÉ tr·ªü n√™n kh√≥ khƒÉn ƒë·ªÉ t√¨m ra ƒë√¢u l√† n∆°i m·ªôt m·∫´u ƒë∆∞·ª£c mi√™u t·∫£ m·ªôt v·∫•n ƒë·ªÅ m√† n√≥ c√≥ li√™n quan v√† kh√≥ khƒÉn ƒë·ªÉ ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ th·ª±c hi·ªán ƒë√∫ng c√°c gi·∫£i ph√°p

M·ª•c ti√™u c·ªßa t√¥i trong s√™-ri n√†y l√† ƒë·∫∑t c√°c thi·∫øt k·∫ø m·∫´u v√†o ƒë√∫ng ho√†n c·∫£nh v√† cung c·∫•p cho b·∫°n t·∫•t c·∫£ c√°c th√¥ng tin b·∫°n c·∫ßn ƒë·ªÉ d·ªÖ d√†ng nh·∫≠n bi·∫øt v√† √°p d·ª•ng c√°c m·∫´u b·∫°n c·∫ßn, ƒë·ªìng th·ªùi th·ª±c hi·ªán n√≥ ngay tr√™n Swift, nh·ªù ƒë√≥ b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng √°p d·ª•ng tr·ª±c ti·∫øp v√†o d·ª± √°n c·ªßa b·∫°n
<h2>Hi·ªÉu v·ªÅ C·∫•u tr√∫c c·ªßa m·ªôt Thi·∫øt k·∫ø M·∫´u</h2>
Ph·∫ßn l·ªõn thi·∫øt k·∫ø m·∫´u √°p d·ª•ng cho m·ªôt nh√≥m nh·ªè c·ªßa ƒë·ªëi t∆∞·ª£ng trong ·ª©ng d·ª•ng v√† gi·∫£i quy·∫øt m·ªôt v·∫•n ƒë·ªÅ ph√°t sinh khi m·ªôt ƒë·ªëi t∆∞·ª£ng-ƒë∆∞·ª£c bi·∫øt ƒë·∫øn v·ªõi t√™n g·ªçi l√† m·ªôt th√†nh ph·∫ßn-c·∫ßn ƒë·ªÉ th·ª±c hi·ªán m·ªôt ho·∫°t ƒë·ªông tr√™n m·ªôt ho·∫∑c nhi·ªÅu ƒë·ªëi t∆∞·ª£ng trong ·ª©ng d·ª•ng.

D√†nh cho m·ªói thi·∫øt k·∫ø m·∫´u trong se-ri n√†y. T√¥i tr√¨nh b√†y v·∫•n ƒë·ªÅ m√† m·∫´u gi·∫£i quy·∫øt, gi·∫£i th√≠ch c√°ch m·∫´u ho·∫°t ƒë·ªông v√† ch·ªâ cho b·∫°n l√†m th·∫ø l√†m n√†o ƒë·ªÉ ·ª©ng d·ª•ng m·∫´u s·ª≠ d·ª•ng Swift. T√¥i c≈©ng s·∫Ω tr√¨nh b√†y c√°c bi·∫øn th·ªÉ ph·ªï bi·∫øn v√† m√¥ t·∫£ c√°c l·ªói th∆∞·ªùng g·∫∑p ƒë·ªëi v·ªõi t·ª´ng m·∫´u.
<h2>C√°c thi·∫øt k·∫ø m·∫´u (design patterns) ƒë√°ng gi√° bao nhi√™u</h2>
R·∫•t d·ªÖ ƒë·ªÉ thuy·∫øt ph·ª•c m·ªçi ng∆∞·ªùi ƒë·ªìng √Ω r·∫±ng c√°c thi·∫øt k·∫ø m·∫´u l√† ƒëi·ªÅu t·ªët. M·ªçi ng∆∞·ªùi hi·ªÉu ƒë∆∞·ª£c s·ª± h·∫•p d·∫´n c·ªßa gi·∫£i ph√°p ƒë∆∞·ª£c s·ª± d·ª•ng ƒë·ªÉ gi·∫£i quy·∫øt ·ªü v√¥ s·ªë c√°c d·ª± √°n ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ kh√≥ khƒÉn. N√≥ kh√≥ h∆°n nhi·ªÅu vi·ªác cung c·∫•p cho m·ªôt l·∫≠p tr√¨nh vi√™n kh√°c trong ƒë·ªôi c·ªßa b·∫°n ch√≠nh x√°c m·∫´u n√†o n√™n ƒë∆∞·ª£c ch·ªçn s·ª± d·ª•ng trong m·ªôt d·ª± √°n.

B·∫°n c√≥ th·ªÉ ƒë√°nh gi√° m·ªôt ch√≠nh s√°ch b·∫£o hi·ªÉm ƒë∆∞·ª£c ƒë·∫°i di·ªán b·∫±ng ti·ªÅn b·∫∑c b·∫±ng c√°ch t·ª± h·ªèi b·∫£n th√¢n m·ªôt s·ªë c√¢u h·ªèi d∆∞·ªõi ƒë√¢y:
<ul>
 	<li>Li·ªáu s·∫Ω c√≥ ƒëi·ªÅu t·ªìi t·ªá n√†o ·∫£nh h∆∞·ªüng ƒë·∫øn t√¥i?</li>
 	<li>Nh·ªØng ƒëi·ªÅu t·ªìi t·ªá c√≥ th∆∞·ªùng xuy√™n s·∫£y ra kh√¥ng?</li>
 	<li>Li·ªáu chi ph√≠ cho v·∫•n ƒë·ªÅ n√†y c√≥ th·ª±c s·ª± ch·ªâ b·∫±ng m·ªôt ph·∫ßn nh·ªè n·∫øu ƒëi·ªÅu t·ªìi t·ªá s·∫£y ra?</li>
</ul>
These simple questions make it easy to understand that there is no point in buying car insurance if
you don‚Äôt have a car or if there are no car thieves in your town. They also highlight the poor value
in paying $10,000 per year to insure an $11,000 car unless you anticipate multiple thefts (in which
case, you might also consider moving to a different area).

Nh·ªØng c√¢u h·ªèi ƒë∆°n gi·∫£n khi·∫øn l√†m cho b·∫°n d·ªÖ d√†ng nh·∫≠n ra r·∫±ng ch·∫≥ng c√≥ l√Ω do g√¨ ƒë·ªÉ b·∫°n mua b·∫£o hi·ªÉm √¥ t√¥ n·∫øu b·∫°n kh√¥ng c√≥ m·ªôt chi·∫øc xe ho·∫∑c ch·∫≥ng c√≥ m·ªôt chi·∫øc xe n√†o b·ªã l·∫•y c·∫Øp trong th·ªã tr·∫•n. H·ªç c≈©ng l√†m n·ªèi b·∫≠t gi√° tr·ªã √≠t ·ªèi khi thanh to√°n $10,000 m·ªôt nƒÉm ƒë·ªÉ b·∫£o hi·ªÉm m·ªôt chi·∫øc xe c√≥ gi√° tr·ªã $11,000 tr·ª´ khi b·∫°n d·ª± ƒëo√°n r·∫±ng s·∫Ω c√≥ nhi·ªÅu v·ª• tr·ªôm c·∫Øp (trong tr∆∞·ªùng h·ª£p n√†y, t√¥i c≈©ng c√≥ th·ªÉ xem x√©t ƒë·∫øn vi·ªác di chuy·ªÉn ƒë·∫øn m·ªôt ƒë·ªãa ƒëi·ªÉm kh√°c)

ƒêi·ªÉm n√†y r√µ r√†ng d√π cho n√≥ ch·ªâ l√† m·ªôt c√°i nh√¨n r·∫•t ƒë∆°n gi·∫£n v·ªÅ b·∫£o hi·ªÉm: ƒë·ª´ng mua m·ªôt ch√≠nh s√°ch b·∫£o hi·ªÉm tr·ª´ khi n√≥ cung c·∫•p m·ªôt v√†i l·ª£i √≠ch. ƒêi·ªÅu t∆∞∆°ng t·ª± c≈©ng ch√≠nh x√°c trong vi·ªác thi·∫øt k·∫ø m·∫´u: ƒê·ª´ng l·ª±a ch·ªçn m·ªôt m·∫´u n√†o tr·ª´ khi n√≥ cung c·∫•p cho b·∫°n m·ªôt v√†i gi√° tr·ªã m√† b·∫°n c√≥ th·ªÉ ƒë·ªãnh l∆∞·ª£ng v√† gh√©p n·ªëi v·ªõi nh·ªØng th·ª© kh√°c. C√°c c√¢u h·ªèi c·∫ßn thi·∫øt ƒë·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã c·ªßa m·ªôt thi·∫øt k·∫ø m·∫´u c≈©ng g·∫ßn t∆∞∆°ng t·ª±:
<ul>
 	<li>M·∫´u m√† b·∫°n mu·ªën s·ª≠ d·ª•ng li·ªáu c√≥ th·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ m√† t√¥i c√≥ th·ªÉ g·∫∑p ph·∫£i?</li>
 	<li>V·∫•n ƒë·ªÅ n√†y c√≥ th∆∞·ªùng xuy√™n s·∫£y ra kh√¥ng?</li>
 	<li>Li·ªáu v·∫•n ƒë·ªÅ trong t∆∞∆°ng l·∫°i c√≥ ƒë·ªß nghi√™m tr·ªçng ƒë·ªÉ t√¥i ph·∫£i d√†nh th·ªùi gian l√†m vi·ªác v·ªõi c√°c thi·∫øt k·∫ø m·∫´u h√¥m nay?</li>
</ul>
Th·ª± s·ª± th√¨ kh√≥ ƒë·ªÉ tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi n√†y. Kh√¥ng c√≥ c√°c b·∫£ng t√≠nh to√°n m·ª©c ƒë·ªô r·ªßi ro trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm, v√† n√≥ tr·ªü n√™n kh√≥ khƒÉn ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng c·∫ßn bao nhi√™u c√¥ng s·ª©c trong t∆∞∆°ng l·∫°i ƒë·ªÉ s·ª≠a m·ªôt v·∫•n ƒë·ªÅ (lo·∫°i tr·ª´ tr∆∞·ªùng h·ª£p v·∫•n ƒë·ªÅ ƒë√≥ s·∫Ω kh√¥ng s·∫£y ra).

ƒê·ªÉ thay th·∫ø, t√¥i c√≥ th·ªÉ d·ªÖ d√†ng t·∫≠p trung ngay v√†o c√°c l·ª£i √≠ch m√† m·ªôt m·∫´u c√≥ th·ªÉ cung c·∫•p. V√≠ d·ª•, c√°c m·∫´u c√≥ th·ªÉ tƒÉng s·ªë kh·∫£ nƒÉng module h√≥a c·ªßa m·ªôt ·ª©ng d·ª•ng th∆∞·ªùng l√†m gi·∫£m t·ªëi thi·ªÉu ·∫£nh h∆∞·ªüng c·ªßa m·ªôt thay ƒë·ªïi trong t∆∞∆°ng lai, nh∆∞ng m·ªôt module ·ª©ng d·ª•ng c√≥ √≠t th√†nh ph·∫ßn li√™n k·∫øt ch·∫∑t ch·∫Ω, n√≥ c√≥ nghƒ©a l√† n√≥ d·ªÖ d√†ng ƒë·ªÉ c√¥ l·∫≠p c√°c ƒë∆°n v·ªã m√£. Khi·∫øn c√°c ƒë∆°n v·ªã m√£ tr·ªü l√™n ƒë·ªôc l·∫≠p l√† b∆∞·ªõc kh·ªüi ƒë·∫ßu c·ªßa cho ki·ªÉm th·ª≠ t·ª´ng ph·∫ßn, v√† t·∫•t nhi√™n m·ªôt l·ª£i √≠ch r√µ r√†ng ngay l·∫≠p t·ª©c n·ªØa c·ªßa vi·ªác s·ª≠ d·ª•ng thi·∫øt k·∫ø m·∫´u c·ªßa b·∫°n d·ªÖ ƒë∆∞·ª£c ki·ªÉm tra, v√† n√¢ng c·∫•p.

Thi·∫øt k·∫ø m·∫´u l√†m tƒÉng s·ªë l∆∞·ª£ng s·ª± tr√¨u t∆∞·ª£ng trong m·ªôt ·ª©ng d·ª•ng cho ph√©p c√°c t√≠nh nƒÉng m·ªõi ƒë∆∞·ª£c th√™m v√†o v·ªõi √≠t c√¥ng s·ª©c v√† m√£ l·∫∑p l·∫°i h∆°n. H·∫ßu h·∫øt m·ªçi ng∆∞·ªùi c√≥ th·ªÉ ƒë·ªìng √Ω vi·ªác ph√°t tri·ªÉn nhanh v√† d·ªÖ h∆°n l√† m·ªôt ƒëi·ªÅu ƒë√°ng gi√°, d·∫´u cho c√≥ th·ªÉ h·ªç s·∫Ω ƒë√°nh gi√° th·∫•p v·∫•n ƒë·ªÅ m√† m·∫´u c√≥ th·ªÉ gi·∫£i quy·∫øt ho·∫∑c ch·ªëng l·∫°i
<h2>S·ª± d·ª•ng m·ªôt thi·∫øt k·∫ø m·∫´u sau khi v·∫•n ƒë·ªÅ ph√°t sinh</h2>
<h2>Nh·ªØng gi·ªõi h·∫°n c·ªßa c√°c thi·∫øt k·∫ø m·∫´u</h2>";s:10:"post_title";s:93:"Hi·ªÉu ƒë√∫ng v·ªÅ c√°c thi·∫øt k·∫ø m·∫´u (Design Patterns) trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:71:"hieu-dung-ve-cac-thiet-ke-mau-design-patterns-trong-phat-trien-phan-mem";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 09:01:47";s:17:"post_modified_gmt";s:19:"2016-08-01 09:01:47";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=423";s:10:"menu_order";s:1:"0";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}i:7;O:8:"stdClass":23:{s:2:"ID";s:3:"450";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-05-21 03:57:54";s:13:"post_date_gmt";s:19:"2016-05-21 03:57:54";s:12:"post_content";s:9388:"The log message is arguably the most important part of a commit, because it‚Äôs the only place that captures not only what was changed, but why.

What goes into a good message? First, it needs to be short, and not just because brevity is the soul of wit. Most of the time, you‚Äôll be viewing commit messages in the context of Git‚Äôs commit log, where there‚Äôs often not a lot of space to display text.

Think of the commit log as a newsfeed for your project, in which the log message is the headline for each commit. Have you ever skimmed the headlines in a newspaper (or, for a more current example, BuzzFeed) and come away thinking you‚Äôd gotten a summary of what was happening in the world? A good headline doesn‚Äôt have to tell the whole story, but it should tell you enough to know what the story is about before you read it.

If you‚Äôre working by yourself, or closely with one or two collaborators, the log may seem interesting just for historical purposes, because you would have been there for most of the commits. But in Git repositories with a lot of collaborators, the commit log can be more valuable as a way of knowing what happened when you weren‚Äôt looking.

Commit messages can, strictly speaking, span multiple lines, and can be as long or as detailed as you want. Git doesn‚Äôt place any hard limit on what goes into a commit message, and in fact, if a given commit does call for additional context, you can add additional paragraphs to a message, like so:
<pre class="line-numbers language-markup"><code class="language-markup">Updated Ruby on Rails version because security

Bumped Rails version to 3.2.11 to fix JSON security bug. 
See also http://weblog.rubyonrails.org/2013/1/8/Rails-3-2-11-3-1-10-3-0-19-and-2-3-15-have-been-released/
</code></pre>
Note that although this message contains a lot more context than just one line, the first line is important because only the first line will be shown in the log:
<pre class="line-numbers language-markup"><code class="language-markup">commit f0c8f185e677026f0832a9c13ab72322773ad9cf
Author: David Demaree 
Date:   Sat Jan 3 15:49:03 2013 -0500

Updated Ruby on Rails version because security
</code></pre>
Like a good headline, the first line here summarizes the reason for the commit; the rest of the message goes into more detail.
<h3>Writing commit messages in your favorite text editor</h3>
Although the examples in this book all have you type your message inline, using the --message or -m argument to git commit, you may be more comfortable writing in your preferred text editor. Git integrates nicely with many popular editors, both on the command line (e.g., Vim, Emacs) or more modern, graphical apps like Atom, Sublime Text, or TextMate. With an editor configured, you can omit the --message flag and Git will hand off a draft commit message to that other program for authoring. When you‚Äôre done, you can usually just close the window and Git will automatically pick up the message you entered.

To take advantage of this sweet integration, first you‚Äôll need to configure Git to use your editor (specifically, your editor‚Äôs command-line program, if it has one). Here, I‚Äôm telling Git to hand off commit messages to Atom:
<pre class="line-numbers language-markup"><code>$: git config --global core.editor "atom --wait"</code></pre>
Every text editor has a slightly different set of arguments or options to pass in to integrate nicely with Git. (As you can see here, we had to pass the --wait option to Atom to get it to work.) GitHub‚Äôs help documentation has a good, <a href="http://bkaprt.com/gfh/05-05/">brief guide to setting up several popular editors.</a>
<h3>Elements of commit message style</h3>
There are few hard rules for crafting effective commit messages‚Äîjust lots of guidelines and good practices, which, if you were to try to follow all of them all of the time, would quickly tie your mind in knots.

To ease the way, here are a few guidelines I‚Äôd recommend always following.
<h4>BE USEFUL</h4>
The purpose of a commit message is to summarize a change. But the purpose of summarizing a change is to help you and your team understand what is going on in your project. The information you put into a message, therefore, should be valuable and useful to the people who will read it.

As fun as it is to use the commit message space for cursing‚Äîat a bug, or Git, or your own clumsiness‚Äîavoid editorializing. Avoid the temptation to write a commit message like ‚ÄúAaaaahhh stupid bugs.‚Äù Instead, take a deep breath, grab a coffee or some herbal tea or do whatever you need to do to clear your head. Then write a message that describes what changed in the commit, as clearly and succinctly as you can.

In addition to a short, clear description, when a commit is relevant to some piece of information in another system‚Äîfor instance, if it fixes a bug logged in your bug tracker‚Äîit‚Äôs also common to include the issue or bug number, like so:
<pre class="line-numbers language-markup"><code>Replace jQuery onReady listener with plain JS; fixes #1357</code></pre>
Some bug trackers (including the one built into every GitHub project) can even be hooked into Git so that commit messages like this one will automatically mark the bug numbered 1357 as done as soon as the commit with this message is merged into master.
<h4>BE DETAILED (ENOUGH)</h4>
As a recovering software engineer, I understand the temptation to fill the commit message‚Äîand emails, and status reports, and stand-up meetings‚Äîwith nerdy details. I love nerdy details. However, while some details are important for understanding a change, there‚Äôs almost always a more general reason for a change that can be explained more succinctly. Besides, there‚Äôs often not enough room to list every single detail about a change and still yield a commit log that‚Äôs easy to scan in a Terminal window. Finding simpler ways to describe something doesn‚Äôt just make the changes you‚Äôve made more comprehensible to your teammates; it‚Äôs also a great way to save space.

A good rule of thumb is to keep the ‚Äúsubject‚Äù portion of your commit messages to one line, or about 70 characters. If there are important details worth including in the message, but that don‚Äôt need to be in the subject line, remember you can still include them as a separate paragraph.
<h4>BE CONSISTENT</h4>
However you and your colleagues decide to write commit messages, your commit log will be more valuable if you all try to follow a similar set of rules. Commit messages are too short to require an elaborate style guide, but having a conversation to establish some conventions, or making a short wiki page with some examples of particularly good (or bad) commit messages, will help things run more smoothly.
<h4>USE THE ACTIVE VOICE</h4>
The commit log isn‚Äôt a list of static things; it‚Äôs a list of changes. It‚Äôs a list of actions you (or someone) have taken that have resulted in versions of your work. Although it may be tempting to use a commit message to label a version of the work‚Äî‚ÄúVersion 1.0,‚Äù ‚ÄúJan 24th deliverable‚Äù‚Äîthere are other, better ways of doing that. Besides, it‚Äôs all too easy to end up in an embarrassing situation like this:
<ul>
 	<li>Making the last homepage update before releasing the new site</li>
</ul>
<pre class="line-numbers language-markup"><code>$: git commit -m "Version 1.0"</code></pre>
<ul>
 	<li>Ten minutes later, after discovering a typo in your CSS</li>
</ul>
<pre class="line-numbers language-markup"><code>$: git commit -m "Version 1.0 (really)"</code></pre>
<ul>
 	<li>Forty minutes later, after discovering another typo</li>
</ul>
<pre class="line-numbers language-markup"><code>$: git commit -m "Version 1.0 (oh FFS)"</code></pre>
Describing changes is not only the most correct format for a commit message, but it‚Äôs also one of the easiest rules to stick to. Rather than concern yourself with abstract questions like whether a given commit is the release version of a thing, you can focus on a much simpler story: I just did a thing, and this is the thing I just did.

Those ‚ÄúVersion 1.0‚Äù commits, therefore, could be described much more simply and accurately:
<pre class="line-numbers language-markup"><code class="language-markup">$: git commit -m "Update homepage for launch"
$: git commit -m "Fix typo in screen.scss"
$: git commit -m "Fix misspelled name on about page"</code></pre>
I also recommend picking a tense and sticking with it, for consistency‚Äôs sake. I tend to use the imperative present tense to describe commits: Fix misspelled name on About page rather than fixed or fixing. There‚Äôs nothing wrong with fixed or fixing, except that they‚Äôre slightly longer. If another style works better for you or your team, go for it‚Äîjust try to go for it consistently.

What happens if your commit message style isn‚Äôt consistent? Your Git repo will collapse into itself and all of your work will be ruined. Kidding! People are fallible, lapses will happen, and a little bit of nonsense in your logs is inevitable. Note, though, that following style rules like these gets easier the more practice you get. Aim to write the best commit messages you can, and your logs will be better and more valuable for it.

<hr />

David Demaree@alistapart.com - The Art of the Commit";s:10:"post_title";s:21:"The Art of the Commit";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:21:"the-art-of-the-commit";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 08:59:18";s:17:"post_modified_gmt";s:19:"2016-08-01 08:59:18";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=450";s:10:"menu_order";s:1:"0";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}i:8;O:8:"stdClass":23:{s:2:"ID";s:3:"460";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-05-22 10:51:51";s:13:"post_date_gmt";s:19:"2016-05-22 10:51:51";s:12:"post_content";s:2348:"<h4>1. Please describe your financial need and explain the specific circumstances that motivate your request for financial aid. (50-300 words)</h4>
<blockquote>I‚Äôm an undergraduate student from Vietnam and want to learn Machine Learning. I think it will be beneficial for my thesis work. But I‚Äôve no job of my own to carry the expanses to pay for the certificate of this course. I earn money by teaching students in various institutions. As a matter of fact it is a part time earning. In this circumstance, it is very much difficult for me to gather such amount of money for the certificate. So I‚Äôm badly in need of this financial aid.</blockquote>
<h4>2. Please tell us why you are taking this course. What is your interest in this field? How would a Course Certificate be valuable to you? (50-300 words)</h4>
<blockquote>I‚Äôm taking this course for my thesis work actually. My thesis field is on‚Äî‚ÄúSemantic Parsing in Natural Language Processing in a view of Machine Learning Approach‚Äù. In graduate research level, this certificate will be valuable in my higher study education regarding in this field and I want to continue my research in Machine Learning field in future.</blockquote>
<h4>3. When participating in this course, how do you intend to demonstrate academic integrity and contribute to the course‚Äôs community? (50-300 words)</h4>
<blockquote>I‚Äôll keep track in this field and try to make some contribution in Machine Learning. I‚Äôm studying in Computer Science field and I also want to continue my education in Machine Learning in graduate level. I interested in keep contact with this community and want to make contribution along with them.</blockquote>
ƒê√¢y l√† email ph·∫£n h·ªìi t·ª´ Coursera sau khi submit th√†nh c√¥ng kh√≥a: <a href="https://www.coursera.org/specializations/data-structures-algorithms">Data Structures and Algorithms</a>

<a href="https://scriptsvn.com/wp-content/uploads/2016/05/Screen-Shot-2016-05-22-at-7.11.39-PM.png"><img class="alignnone size-full wp-image-464" src="https://scriptsvn.com/wp-content/uploads/2016/05/Screen-Shot-2016-05-22-at-7.11.39-PM.png" alt="Screen Shot 2016-05-22 at 7.11.39 PM" width="1361" height="807" /></a>

L∆∞u √Ω ch·ªâ g·ª≠i apply xin mi·ªÖn ph√≠ khi th·ª±c s·ª± th·∫•y c·∫ßn thi·∫øt. L√†m nhi·ªÅu l·∫ßn li√™n t·ª•c s·∫Ω b·ªã kh√≥a t√†i kho·∫£n";s:10:"post_title";s:94:"C√°ch tr·∫£ l·ªùi c√°c c√¢u h·ªèi ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c kh√≥a h·ªçc mi·ªÖn ph√≠ c·ªßa Coursera";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:68:"cach-tra-loi-cac-cau-hoi-de-nhan-duoc-khoa-hoc-mien-phi-cua-coursera";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 08:57:27";s:17:"post_modified_gmt";s:19:"2016-08-01 08:57:27";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=460";s:10:"menu_order";s:1:"0";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}i:9;O:8:"stdClass":23:{s:2:"ID";s:3:"471";s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2016-05-23 03:09:59";s:13:"post_date_gmt";s:19:"2016-05-23 03:09:59";s:12:"post_content";s:2827:"Alright, so there were many times when I needed to have a bunch of development domains pointed to localhost, i.e 127.0.0.1. It‚Äôs usually fine to use something like <code>http://127.0.0.1:3000</code> (hey Rails!), or even <code>mysite.dev</code> as a custom entry in <code>/etc/hosts</code> file. But what if you need a dynamically changing domain names? Think of <code>*.dev</code>. Well, you can obviously keep adding more stuff to hosts file, but that‚Äôs a pretty big hassle. We need a DNS server!

About a year ago I found this nice little DNS server ‚Äì <a href="https://github.com/robbiev/devdns">devdns</a>. It‚Äôs written in Go and could be easily grabbed as a binary from github. Why devdns? I kind of liked the idea that it was designed to do only one thing ‚Äì respond with 127.0.0.1 to all type A queries and NXDOMAIN to any other query. Right after I found it I decided that having localhost hardcoded is not super useful, so I forked the repo and <a href="https://github.com/robbiev/devdns/pull/3">added the ability</a> to specify which IP address should be used by default.

How to use it? First, you might want to see how domain name resolves to an IP address:
<pre class="line-numbers language-markup"><code class="language-markup">$ resolveip foobar.dev
resolveip: Unable to find hostid for 'foobar.dev': host not found</code></pre>
The error above indicates that we can‚Äôt resolve the requested domain name. To make that happen, we will use OSX‚Äôs resolver mechanism. Given that our desired domain is .dev, you‚Äôll need to create a resolver config file:
<pre class="line-numbers language-markup"><code class="language-markup">$ sudo mkdir -p /etc/resolver
$ sudo nano /etc/resolver/dev</code></pre>
And specify contents for the dev file:
<pre class="line-numbers language-markup"><code class="language-markup">nameserver 127.0.0.1
port 5300</code></pre>
So now we just need to start the dns server:
<pre class="line-numbers language-markup"><code class="language-markup">$ devdns 
2015/12/09 20:48:45 Listening on 127.0.0.1:5300, resolving to 127.0.0.1</code></pre>
And voila, it works!:

$ resolveip foobar.dev
IP address of foobar.dev is 127.0.0.1
Once you decide that you need to resolve the *.dev domains to another IP address, all you have to do is to restart local DNS server with the following flag:
<pre class="line-numbers language-markup"><code class="language-markup"># lets resolve all *.dev domains to docker-machine's VM
$ devdns -ip="192.168.99.100"</code></pre>
And now our domain name should resolve to a different IP address:
<pre class="line-numbers language-markup"><code class="language-markup">$ resolveip foobar.dev
IP address of foobar.dev is 192.168.99.100</code></pre>
Originally posted at http://sosedoff.com/2015/12/09/dns-for-local-development.html";s:10:"post_title";s:25:"DNS for local development";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:25:"dns-for-local-development";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-08-01 08:56:08";s:17:"post_modified_gmt";s:19:"2016-08-01 08:56:08";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:28:"https://scriptsvn.com/?p=471";s:10:"menu_order";s:1:"0";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";}}s:8:"col_info";a:23:{i:0;O:8:"stdClass":13:{s:4:"name";s:2:"ID";s:7:"orgname";s:2:"ID";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:3;s:6:"length";i:20;s:9:"charsetnr";i:63;s:5:"flags";i:49699;s:4:"type";i:8;s:8:"decimals";i:0;}i:1;O:8:"stdClass":13:{s:4:"name";s:11:"post_author";s:7:"orgname";s:11:"post_author";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:1;s:6:"length";i:20;s:9:"charsetnr";i:63;s:5:"flags";i:49193;s:4:"type";i:8;s:8:"decimals";i:0;}i:2;O:8:"stdClass":13:{s:4:"name";s:9:"post_date";s:7:"orgname";s:9:"post_date";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:19;s:6:"length";i:19;s:9:"charsetnr";i:63;s:5:"flags";i:16513;s:4:"type";i:12;s:8:"decimals";i:0;}i:3;O:8:"stdClass":13:{s:4:"name";s:13:"post_date_gmt";s:7:"orgname";s:13:"post_date_gmt";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:19;s:6:"length";i:19;s:9:"charsetnr";i:63;s:5:"flags";i:129;s:4:"type";i:12;s:8:"decimals";i:0;}i:4;O:8:"stdClass":13:{s:4:"name";s:12:"post_content";s:7:"orgname";s:12:"post_content";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:13268;s:6:"length";i:4294967295;s:9:"charsetnr";i:45;s:5:"flags";i:4113;s:4:"type";i:252;s:8:"decimals";i:0;}i:5;O:8:"stdClass":13:{s:4:"name";s:10:"post_title";s:7:"orgname";s:10:"post_title";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:94;s:6:"length";i:262140;s:9:"charsetnr";i:45;s:5:"flags";i:4113;s:4:"type";i:252;s:8:"decimals";i:0;}i:6;O:8:"stdClass":13:{s:4:"name";s:12:"post_excerpt";s:7:"orgname";s:12:"post_excerpt";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:0;s:6:"length";i:262140;s:9:"charsetnr";i:45;s:5:"flags";i:4113;s:4:"type";i:252;s:8:"decimals";i:0;}i:7;O:8:"stdClass":13:{s:4:"name";s:11:"post_status";s:7:"orgname";s:11:"post_status";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:7;s:6:"length";i:80;s:9:"charsetnr";i:45;s:5:"flags";i:16385;s:4:"type";i:253;s:8:"decimals";i:0;}i:8;O:8:"stdClass":13:{s:4:"name";s:14:"comment_status";s:7:"orgname";s:14:"comment_status";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:4;s:6:"length";i:80;s:9:"charsetnr";i:45;s:5:"flags";i:1;s:4:"type";i:253;s:8:"decimals";i:0;}i:9;O:8:"stdClass":13:{s:4:"name";s:11:"ping_status";s:7:"orgname";s:11:"ping_status";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:4;s:6:"length";i:80;s:9:"charsetnr";i:45;s:5:"flags";i:1;s:4:"type";i:253;s:8:"decimals";i:0;}i:10;O:8:"stdClass":13:{s:4:"name";s:13:"post_password";s:7:"orgname";s:13:"post_password";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:0;s:6:"length";i:80;s:9:"charsetnr";i:45;s:5:"flags";i:1;s:4:"type";i:253;s:8:"decimals";i:0;}i:11;O:8:"stdClass":13:{s:4:"name";s:9:"post_name";s:7:"orgname";s:9:"post_name";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:71;s:6:"length";i:800;s:9:"charsetnr";i:45;s:5:"flags";i:16393;s:4:"type";i:253;s:8:"decimals";i:0;}i:12;O:8:"stdClass":13:{s:4:"name";s:7:"to_ping";s:7:"orgname";s:7:"to_ping";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:0;s:6:"length";i:262140;s:9:"charsetnr";i:45;s:5:"flags";i:4113;s:4:"type";i:252;s:8:"decimals";i:0;}i:13;O:8:"stdClass":13:{s:4:"name";s:6:"pinged";s:7:"orgname";s:6:"pinged";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:0;s:6:"length";i:262140;s:9:"charsetnr";i:45;s:5:"flags";i:4113;s:4:"type";i:252;s:8:"decimals";i:0;}i:14;O:8:"stdClass":13:{s:4:"name";s:13:"post_modified";s:7:"orgname";s:13:"post_modified";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:19;s:6:"length";i:19;s:9:"charsetnr";i:63;s:5:"flags";i:129;s:4:"type";i:12;s:8:"decimals";i:0;}i:15;O:8:"stdClass":13:{s:4:"name";s:17:"post_modified_gmt";s:7:"orgname";s:17:"post_modified_gmt";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:19;s:6:"length";i:19;s:9:"charsetnr";i:63;s:5:"flags";i:129;s:4:"type";i:12;s:8:"decimals";i:0;}i:16;O:8:"stdClass":13:{s:4:"name";s:21:"post_content_filtered";s:7:"orgname";s:21:"post_content_filtered";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:0;s:6:"length";i:4294967295;s:9:"charsetnr";i:45;s:5:"flags";i:4113;s:4:"type";i:252;s:8:"decimals";i:0;}i:17;O:8:"stdClass":13:{s:4:"name";s:11:"post_parent";s:7:"orgname";s:11:"post_parent";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:1;s:6:"length";i:20;s:9:"charsetnr";i:63;s:5:"flags";i:49193;s:4:"type";i:8;s:8:"decimals";i:0;}i:18;O:8:"stdClass":13:{s:4:"name";s:4:"guid";s:7:"orgname";s:4:"guid";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:28;s:6:"length";i:1020;s:9:"charsetnr";i:45;s:5:"flags";i:1;s:4:"type";i:253;s:8:"decimals";i:0;}i:19;O:8:"stdClass":13:{s:4:"name";s:10:"menu_order";s:7:"orgname";s:10:"menu_order";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:1;s:6:"length";i:11;s:9:"charsetnr";i:63;s:5:"flags";i:32769;s:4:"type";i:3;s:8:"decimals";i:0;}i:20;O:8:"stdClass":13:{s:4:"name";s:9:"post_type";s:7:"orgname";s:9:"post_type";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:4;s:6:"length";i:80;s:9:"charsetnr";i:45;s:5:"flags";i:16393;s:4:"type";i:253;s:8:"decimals";i:0;}i:21;O:8:"stdClass":13:{s:4:"name";s:14:"post_mime_type";s:7:"orgname";s:14:"post_mime_type";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:0;s:6:"length";i:400;s:9:"charsetnr";i:45;s:5:"flags";i:1;s:4:"type";i:253;s:8:"decimals";i:0;}i:22;O:8:"stdClass":13:{s:4:"name";s:13:"comment_count";s:7:"orgname";s:13:"comment_count";s:5:"table";s:13:"reactvn_posts";s:8:"orgtable";s:13:"reactvn_posts";s:3:"def";s:0:"";s:2:"db";s:14:"zadmin_reactvn";s:7:"catalog";s:3:"def";s:10:"max_length";i:1;s:6:"length";i:20;s:9:"charsetnr";i:63;s:5:"flags";i:32769;s:4:"type";i:8;s:8:"decimals";i:0;}}s:8:"num_rows";i:10;s:10:"return_val";i:10;}